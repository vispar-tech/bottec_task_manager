// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios';
import type { LoginUserData, LoginUserResponses, LoginUserErrors, RefreshTokenData, RefreshTokenResponses, RegisterUserData, RegisterUserResponses, RegisterUserErrors, LogoutUserData, LogoutUserResponses, ReadCurrentUserData, ReadCurrentUserResponses, ReadTasksData, ReadTasksResponses, ReadTasksErrors, CreateTaskData, CreateTaskResponses, CreateTaskErrors, DeleteTaskData, DeleteTaskResponses, DeleteTaskErrors, ReadTaskData, ReadTaskResponses, ReadTaskErrors, UpdateTaskData, UpdateTaskResponses, UpdateTaskErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';
import { readTasksResponseTransformer, createTaskResponseTransformer, readTaskResponseTransformer, updateTaskResponseTransformer } from './transformers.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Log in a user
 * Authenticate a user and return a response with an access token.
 */
export const loginUser = <ThrowOnError extends boolean = false>(options: Options<LoginUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginUserResponses, LoginUserErrors, ThrowOnError>({
        url: '/v1/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refresh token
 * Refresh current tokens.
 */
export const refreshToken = <ThrowOnError extends boolean = false>(options?: Options<RefreshTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RefreshTokenResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'accessToken',
                type: 'apiKey'
            }
        ],
        url: '/v1/auth/refresh',
        ...options
    });
};

/**
 * Register a new user
 * Create a new user account with the provided registration data.
 */
export const registerUser = <ThrowOnError extends boolean = false>(options: Options<RegisterUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterUserResponses, RegisterUserErrors, ThrowOnError>({
        responseType: 'json',
        url: '/v1/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Log out user
 * Clear the user's authentication cookie to log them out.
 */
export const logoutUser = <ThrowOnError extends boolean = false>(options?: Options<LogoutUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LogoutUserResponses, unknown, ThrowOnError>({
        url: '/v1/auth/logout',
        ...options
    });
};

/**
 * Get current user
 * Retrieve the currently authenticated user's information.
 */
export const readCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<ReadCurrentUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadCurrentUserResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'accessToken',
                type: 'apiKey'
            }
        ],
        url: '/v1/auth/users/me',
        ...options
    });
};

/**
 * Get all tasks
 * Retrieve all tasks for the current user.
 */
export const readTasks = <ThrowOnError extends boolean = false>(options: Options<ReadTasksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadTasksResponses, ReadTasksErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'accessToken',
                type: 'apiKey'
            }
        ],
        responseTransformer: readTasksResponseTransformer,
        url: '/v1/tasks/',
        ...options
    });
};

/**
 * Create a new task
 * Create a new task for the current user.
 */
export const createTask = <ThrowOnError extends boolean = false>(options: Options<CreateTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTaskResponses, CreateTaskErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'accessToken',
                type: 'apiKey'
            }
        ],
        responseTransformer: createTaskResponseTransformer,
        url: '/v1/tasks/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a task
 * Delete a task for the current user.
 */
export const deleteTask = <ThrowOnError extends boolean = false>(options: Options<DeleteTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTaskResponses, DeleteTaskErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'accessToken',
                type: 'apiKey'
            }
        ],
        url: '/v1/tasks/{task_id}',
        ...options
    });
};

/**
 * Get a task by ID
 * Retrieve a task by ID for the current user.
 */
export const readTask = <ThrowOnError extends boolean = false>(options: Options<ReadTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadTaskResponses, ReadTaskErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'accessToken',
                type: 'apiKey'
            }
        ],
        responseTransformer: readTaskResponseTransformer,
        url: '/v1/tasks/{task_id}',
        ...options
    });
};

/**
 * Update a task
 * Update a task for the current user.
 */
export const updateTask = <ThrowOnError extends boolean = false>(options: Options<UpdateTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTaskResponses, UpdateTaskErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                in: 'cookie',
                name: 'accessToken',
                type: 'apiKey'
            }
        ],
        responseTransformer: updateTaskResponseTransformer,
        url: '/v1/tasks/{task_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};