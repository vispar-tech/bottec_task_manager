// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

/**
 * ValidationError
 */
export const zValidationError = z.object({
    loc: z.array(z.unknown()),
    msg: z.string(),
    type: z.string()
});

/**
 * HTTPValidationError
 */
export const zHttpValidationError = z.object({
    detail: z.array(zValidationError).optional()
});

/**
 * InvalidCredentialsResponse
 * Schema for invalid credentials.
 */
export const zInvalidCredentialsResponse = z.object({
    detail: z.string()
});

/**
 * TaskOut
 * Task response payload.
 */
export const zTaskOut = z.object({
    id: z.number().int(),
    title: z.string(),
    description: z.string(),
    isDone: z.boolean(),
    createdAt: z.string().datetime()
});

/**
 * Paginated[TaskOut]
 */
export const zPaginatedTaskOut = z.object({
    items: z.array(zTaskOut),
    total: z.number().int(),
    page: z.number().int(),
    size: z.number().int()
});

/**
 * TaskCreate
 * Task creation request payload.
 */
export const zTaskCreate = z.object({
    title: z.string().min(1).max(255),
    description: z.string().min(1).max(2048),
    isDone: z.boolean()
});

/**
 * TaskUpdate
 * Task update request payload.
 */
export const zTaskUpdate = z.object({
    title: z.union([
        z.string().min(1).max(255),
        z.null()
    ]).optional(),
    description: z.union([
        z.string().min(1).max(2048),
        z.null()
    ]).optional(),
    isDone: z.union([
        z.boolean(),
        z.null()
    ]).optional()
});

/**
 * UserLogin
 * Schema for user login.
 */
export const zUserLogin = z.object({
    email: z.string(),
    password: z.string()
});

/**
 * UserRead
 * Schema for user read.
 */
export const zUserRead = z.object({
    email: z.string()
});

/**
 * UserRegister
 * Schema for user registration.
 */
export const zUserRegister = z.object({
    email: z.string().email(),
    password: z.string(),
    passwordConfirm: z.string()
});

export const zLoginUserData = zUserLogin;

/**
 * Successful Response
 */
export const zLoginUserResponse = z.void();

/**
 * Successful Response
 */
export const zRefreshTokenResponse = z.void();

export const zRegisterUserData = zUserRegister;

/**
 * Successful Response
 */
export const zRegisterUserResponse = zUserRead;

/**
 * Successful Response
 */
export const zLogoutUserResponse = z.void();

/**
 * Successful Response
 */
export const zReadCurrentUserResponse = zUserRead;

/**
 * Title
 */
export const zReadTasksParameterTitle = z.union([
    z.string().max(255),
    z.null()
]);

/**
 * Is Done
 */
export const zReadTasksParameterIsDone = z.union([
    z.boolean(),
    z.null()
]);

/**
 * Sort By
 */
export const zReadTasksParameterSortBy = z.enum([
    'title',
    'description',
    'is_done',
    'created_at'
]);

/**
 * Sort Order
 */
export const zReadTasksParameterSortOrder = z.enum([
    'asc',
    'desc'
]);

/**
 * Page
 */
export const zReadTasksParameterPage = z.number().int().gte(1);

/**
 * Size
 */
export const zReadTasksParameterSize = z.number().int().gte(1);

/**
 * Successful Response
 */
export const zReadTasksResponse = zPaginatedTaskOut;

export const zCreateTaskData = zTaskCreate;

/**
 * Successful Response
 */
export const zCreateTaskResponse = zTaskOut;

/**
 * Task Id
 */
export const zDeleteTaskParameterTaskId = z.number().int();

/**
 * Successful Response
 */
export const zDeleteTaskResponse = z.void();

/**
 * Task Id
 */
export const zReadTaskParameterTaskId = z.number().int();

/**
 * Successful Response
 */
export const zReadTaskResponse = zTaskOut;

export const zUpdateTaskData = zTaskUpdate;

/**
 * Task Id
 */
export const zUpdateTaskParameterTaskId = z.number().int();

/**
 * Successful Response
 */
export const zUpdateTaskResponse = zTaskOut;