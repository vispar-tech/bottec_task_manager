// This file is auto-generated by @hey-api/openapi-ts

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * InvalidCredentialsResponse
 * Schema for invalid credentials.
 */
export type InvalidCredentialsResponse = {
    /**
     * Detail
     */
    detail: string;
};

/**
 * Paginated[TaskOut]
 */
export type PaginatedTaskOut = {
    /**
     * Items
     */
    items: Array<TaskOut>;
    /**
     * Total
     */
    total: number;
    /**
     * Page
     */
    page: number;
    /**
     * Size
     */
    size: number;
};

/**
 * TaskCreate
 * Task creation request payload.
 */
export type TaskCreate = {
    /**
     * Title
     */
    title: string;
    /**
     * Description
     */
    description: string;
    /**
     * Isdone
     */
    isDone: boolean;
};

/**
 * TaskOut
 * Task response payload.
 */
export type TaskOut = {
    /**
     * Id
     */
    id: number;
    /**
     * Title
     */
    title: string;
    /**
     * Description
     */
    description: string;
    /**
     * Isdone
     */
    isDone: boolean;
    /**
     * Createdat
     */
    createdAt: Date;
};

/**
 * TaskUpdate
 * Task update request payload.
 */
export type TaskUpdate = {
    /**
     * Title
     */
    title?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Isdone
     */
    isDone?: boolean | null;
};

/**
 * UserLogin
 * Schema for user login.
 */
export type UserLogin = {
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
};

/**
 * UserRead
 * Schema for user read.
 */
export type UserRead = {
    /**
     * Email
     */
    email: string;
};

/**
 * UserRegister
 * Schema for user registration.
 */
export type UserRegister = {
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
    /**
     * Passwordconfirm
     */
    passwordConfirm: string;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type LoginUserData = {
    body: UserLogin;
    path?: never;
    query?: never;
    url: '/v1/auth/login';
};

export type LoginUserErrors = {
    /**
     * Неверный логин или пароль
     */
    400: InvalidCredentialsResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginUserError = LoginUserErrors[keyof LoginUserErrors];

export type LoginUserResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type LoginUserResponse = LoginUserResponses[keyof LoginUserResponses];

export type RefreshTokenData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/auth/refresh';
};

export type RefreshTokenResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type RefreshTokenResponse = RefreshTokenResponses[keyof RefreshTokenResponses];

export type RegisterUserData = {
    body: UserRegister;
    path?: never;
    query?: never;
    url: '/v1/auth/register';
};

export type RegisterUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterUserError = RegisterUserErrors[keyof RegisterUserErrors];

export type RegisterUserResponses = {
    /**
     * Successful Response
     */
    200: UserRead;
};

export type RegisterUserResponse = RegisterUserResponses[keyof RegisterUserResponses];

export type LogoutUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/auth/logout';
};

export type LogoutUserResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type LogoutUserResponse = LogoutUserResponses[keyof LogoutUserResponses];

export type ReadCurrentUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/auth/users/me';
};

export type ReadCurrentUserResponses = {
    /**
     * Successful Response
     */
    200: UserRead;
};

export type ReadCurrentUserResponse = ReadCurrentUserResponses[keyof ReadCurrentUserResponses];

export type ReadTasksData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Title
         */
        title?: string | null;
        /**
         * Is Done
         */
        is_done?: boolean | null;
        /**
         * Sort By
         */
        sort_by?: 'title' | 'description' | 'is_done' | 'created_at';
        /**
         * Sort Order
         */
        sort_order?: 'asc' | 'desc';
        /**
         * Page
         */
        page: number;
        /**
         * Size
         */
        size: number;
    };
    url: '/v1/tasks/';
};

export type ReadTasksErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadTasksError = ReadTasksErrors[keyof ReadTasksErrors];

export type ReadTasksResponses = {
    /**
     * Successful Response
     */
    200: PaginatedTaskOut;
};

export type ReadTasksResponse = ReadTasksResponses[keyof ReadTasksResponses];

export type CreateTaskData = {
    body: TaskCreate;
    path?: never;
    query?: never;
    url: '/v1/tasks/';
};

export type CreateTaskErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTaskError = CreateTaskErrors[keyof CreateTaskErrors];

export type CreateTaskResponses = {
    /**
     * Successful Response
     */
    200: TaskOut;
};

export type CreateTaskResponse = CreateTaskResponses[keyof CreateTaskResponses];

export type DeleteTaskData = {
    body?: never;
    path: {
        /**
         * Task Id
         */
        task_id: number;
    };
    query?: never;
    url: '/v1/tasks/{task_id}';
};

export type DeleteTaskErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTaskError = DeleteTaskErrors[keyof DeleteTaskErrors];

export type DeleteTaskResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteTaskResponse = DeleteTaskResponses[keyof DeleteTaskResponses];

export type ReadTaskData = {
    body?: never;
    path: {
        /**
         * Task Id
         */
        task_id: number;
    };
    query?: never;
    url: '/v1/tasks/{task_id}';
};

export type ReadTaskErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadTaskError = ReadTaskErrors[keyof ReadTaskErrors];

export type ReadTaskResponses = {
    /**
     * Successful Response
     */
    200: TaskOut;
};

export type ReadTaskResponse = ReadTaskResponses[keyof ReadTaskResponses];

export type UpdateTaskData = {
    body: TaskUpdate;
    path: {
        /**
         * Task Id
         */
        task_id: number;
    };
    query?: never;
    url: '/v1/tasks/{task_id}';
};

export type UpdateTaskErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateTaskError = UpdateTaskErrors[keyof UpdateTaskErrors];

export type UpdateTaskResponses = {
    /**
     * Successful Response
     */
    200: TaskOut;
};

export type UpdateTaskResponse = UpdateTaskResponses[keyof UpdateTaskResponses];

export type ClientOptions = {
    baseURL: 'http://localhost:5050' | (string & {});
};