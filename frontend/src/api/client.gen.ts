// This file is auto-generated by @hey-api/openapi-ts

import type { AxiosResponse } from 'axios'
import type { ClientOptions } from './types.gen'
import {
	type Config,
	type ClientOptions as DefaultClientOptions,
	createClient,
	createConfig,
} from '@hey-api/client-axios'
import { logoutUser, refreshToken } from './sdk.gen'

/**
 * The `createClientConfig()` function will be called on client initialization
 * and the returned object will become the client's initial configuration.
 *
 * You may want to initialize your client this way instead of calling
 * `setConfig()`. This is useful for example if you're using Next.js
 * to ensure your client always has the correct values.
 */
export type CreateClientConfig<T extends DefaultClientOptions = ClientOptions> =
	(
		override?: Config<DefaultClientOptions & T>
	) => Config<Required<DefaultClientOptions> & T>

export const client = createClient(
	createConfig<ClientOptions>({
		baseURL: 'http://localhost:5050',
		withCredentials: true,
	})
)

function creatResponseInterceptor() {
	const interceptor = client.instance.interceptors.response.use(
		<T>(response: AxiosResponse<T>): Promise<AxiosResponse<T>> =>
			Promise.resolve(response),
		error => {
			if (error.response.status !== 401) {
				return Promise.reject(error)
			}

			client.instance.interceptors.response.eject(interceptor)

			return refreshToken()
				.then(() => {
					return client.instance(error.response.config)
				})
				.catch(error2 => {
					logoutUser()
					return Promise.reject(error2)
				})
				.finally(creatResponseInterceptor)
		}
	)
}

creatResponseInterceptor()
