// This file is auto-generated by @hey-api/openapi-ts

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const InvalidCredentialsResponseSchema = {
    properties: {
        detail: {
            type: 'string',
            title: 'Detail'
        }
    },
    type: 'object',
    required: ['detail'],
    title: 'InvalidCredentialsResponse',
    description: 'Schema for invalid credentials.'
} as const;

export const Paginated_TaskOut_Schema = {
    properties: {
        items: {
            items: {
                '$ref': '#/components/schemas/TaskOut'
            },
            type: 'array',
            title: 'Items'
        },
        total: {
            type: 'integer',
            title: 'Total'
        },
        page: {
            type: 'integer',
            title: 'Page'
        },
        size: {
            type: 'integer',
            title: 'Size'
        }
    },
    type: 'object',
    required: ['items', 'total', 'page', 'size'],
    title: 'Paginated[TaskOut]'
} as const;

export const TaskCreateSchema = {
    properties: {
        title: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Title'
        },
        description: {
            type: 'string',
            maxLength: 2048,
            minLength: 1,
            title: 'Description'
        },
        isDone: {
            type: 'boolean',
            title: 'Isdone'
        }
    },
    type: 'object',
    required: ['title', 'description', 'isDone'],
    title: 'TaskCreate',
    description: 'Task creation request payload.'
} as const;

export const TaskOutSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        isDone: {
            type: 'boolean',
            title: 'Isdone'
        },
        createdAt: {
            type: 'string',
            format: 'date-time',
            title: 'Createdat'
        }
    },
    type: 'object',
    required: ['id', 'title', 'description', 'isDone', 'createdAt'],
    title: 'TaskOut',
    description: 'Task response payload.'
} as const;

export const TaskUpdateSchema = {
    properties: {
        title: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    minLength: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 2048,
                    minLength: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        isDone: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Isdone'
        }
    },
    type: 'object',
    title: 'TaskUpdate',
    description: 'Task update request payload.'
} as const;

export const UserLoginSchema = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        },
        password: {
            type: 'string',
            title: 'Password'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserLogin',
    description: 'Schema for user login.'
} as const;

export const UserReadSchema = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['email'],
    title: 'UserRead',
    description: 'Schema for user read.'
} as const;

export const UserRegisterSchema = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        passwordConfirm: {
            type: 'string',
            title: 'Passwordconfirm'
        }
    },
    type: 'object',
    required: ['email', 'password', 'passwordConfirm'],
    title: 'UserRegister',
    description: 'Schema for user registration.'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;